name: Docker build and deploy to CapRover
on:
  push:
    branches:
      - dev
      

env:
  PROJECTNAME: dojorps
  REGISTRY: ${{ vars.DOCKERHUB_USERNAME}}
  CHART_DIR: charts
  CHART_REPO: oostvoort/helm-charts
  CHART_REPO_BRANCH: gh-pages

defaults:
  run:
    shell: bash

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: true


      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}- 

      - name: Login to Dockerhub
        uses: docker/login-action@v2
        with:
          username: ${{ vars.DOCKERHUB_USERNAME}}
          password: ${{ secrets.DOCKERHUB_TOKEN }}


      # - name: Build, tag, and push image
      #   id: build-image
      #   run: |
      #     SHORT_SHA=${GITHUB_SHA::7}
      #     docker build -t $REGISTRY/$PROJECTNAME-$GITHUB_REF_NAME:$SHORT_SHA -t $REGISTRY/$PROJECTNAME-$GITHUB_REF_NAME:latest  .
      #     docker push $REGISTRY/$PROJECTNAME-$GITHUB_REF_NAME:latest
      #     docker push $REGISTRY/$PROJECTNAME-$GITHUB_REF_NAME:$SHORT_SHA
  helmRelease:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Install Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.8.1

      - name: custom packaging
        run: |
          VERSION=${{github.ref_name}}
          rm -rf .cr-release-packages
          mkdir -p .cr-release-packages
          helm package deploy/ --app-version=${VERSION:1} --version=${VERSION:1} 

      - name: Run chart-releaser
        # switch back to helm/chart-releaser-action if this contribution is ever merged
        uses: askcloudarchitech/chart-releaser-action@skip-packaging-option
        with:
          skip_packaging: true
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      # - name: Deploy to ArgoCD
      #   id: deploy-image
      #   run: |
      #     wget https://github.com/argoproj/argo-cd/releases/download/v2.8.3/argocd-linux-amd64 -O argocd
      #     chmod +x argocd
      #     sudo mv argocd /usr/local/bin
      #     export ARGOCD_SERVER=${{ vars.ARGOCD_SERVER }}
      #     export ARGOCD_AUTH_TOKEN=${{ secrets.ARGOCD_AUTH_TOKEN }}
      #     argocd app create $PROJECTNAME-$GITHUB_REF_NAME --repo https://github.com/$GITHUB_REPOSITORY.git --revision $GITHUB_REF_NAME --path ./deploy/ --values values-$GITHUB_REF_NAME.yaml --dest-namespace $PROJECTNAME-$GITHUB_REF_NAME  --dest-server https://kubernetes.default.svc --upsert
      #     argocd app sync $PROJECTNAME-$GITHUB_REF_NAME
      #     argocd app wait $PROJECTNAME-$GITHUB_REF_NAME
      #     argocd app actions run $PROJECTNAME-$GITHUB_REF_NAME --namespace $PROJECTNAME-$GITHUB_REF_NAME restart --kind Deployment 