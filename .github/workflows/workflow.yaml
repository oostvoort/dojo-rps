name: Docker build and deploy to CapRover
on:
  push:
    branches:
      - dev
      

env:
  PROJECTNAME: dojorps
  REGISTRY: ${{ vars.DOCKERHUB_USERNAME}}
  CHART_DIR: charts
  CHART_REPO: oostvoort/helm-charts
  CHART_REPO_BRANCH: gh-pages

defaults:
  run:
    shell: bash

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: true


      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}- 

      - name: Login to Dockerhub
        uses: docker/login-action@v2
        with:
          username: ${{ vars.DOCKERHUB_USERNAME}}
          password: ${{ secrets.DOCKERHUB_TOKEN }}


      # - name: Build, tag, and push image
      #   id: build-image
      #   run: |
      #     SHORT_SHA=${GITHUB_SHA::7}
      #     docker build -t $REGISTRY/$PROJECTNAME-$GITHUB_REF_NAME:$SHORT_SHA -t $REGISTRY/$PROJECTNAME-$GITHUB_REF_NAME:latest  .
      #     docker push $REGISTRY/$PROJECTNAME-$GITHUB_REF_NAME:latest
      #     docker push $REGISTRY/$PROJECTNAME-$GITHUB_REF_NAME:$SHORT_SHA

  helmRelease:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3


      - name: Checkout Helm chart repo
        uses: actions/checkout@v3
        with:
          repository: ${{ env.CHART_REPO }}


      - name: Install yq - portable yaml processor
        uses: mikefarah/yq@v4.30.5

      - name: Collect charts
        id: charts
        run: |
          set -e
          find -L charts -mindepth 2 -maxdepth 2 -type f \( -name 'Chart.yaml' -o -name 'Chart.yml' \) -exec dirname "{}" \; \
          | sort -u \
          | sed -E 's/^/- /' \
          | yq --no-colors --indent 0 --output-format json '.' \
          | sed -E 's/^/charts=/' >> $GITHUB_OUTPUT

      - name: Install chart releaser
        run: |
          set -e
          arch="$(dpkg --print-architecture)"
          curl -s https://api.github.com/repos/helm/chart-releaser/releases/latest \
          | yq --indent 0 --no-colors --input-format json --unwrapScalar \
            ".assets[] | select(.name | test("\""^chart-releaser_.+_linux_${arch}\.tar\.gz$"\"")) | .browser_download_url" \
          | xargs curl -SsL \
          | tar zxf - -C /usr/local/bin

      - name: Install Helm
        uses: azure/setup-helm@v3.4

      - name: Helm Deps
        run: |
          set -ex
          echo '${{ steps.charts.outputs.charts }}' \
          | yq --indent 0 --no-colors --input-format json --unwrapScalar '.[]' \
          | while read -r dir; do
              helm dependency update $dir;
              if [ -f "$dir/Chart.lock" ]; then
                yq --indent 0 \
                  '.dependencies | map(["helm", "repo", "add", .name, .repository] | join(" ")) | .[]' \
                  "$dir/Chart.lock" \
                | sh --;
              fi
            done

      - name: Package charts
        id: package
        run: |
          set -ex
          PACKAGES=.cr-release-packages
          echo '${{ steps.charts.outputs.charts }}' \
          | yq --indent 0 --no-colors --input-format json --unwrapScalar '.[]' \
          | xargs -d$'\n' cr package --package-path "$PACKAGES"
          echo "dir=${PACKAGES}" >> $GITHUB_OUTPUT

      - name: Upload packages
        run: |
          set -ex
          git config --list
          owner=$(cut -d '/' -f 1 <<< '${{ github.repository }}')
          repo=$(cut -d '/' -f 2 <<< '${{ github.repository }}')
          cr upload --commit '${{ github.sha }}' --git-repo "$repo" --owner "$owner" --token '${{ github.token }}' \
            --package-path '${{ steps.package.outputs.dir }}' --skip-existing


      # - name: Deploy to ArgoCD
      #   id: deploy-image
      #   run: |
      #     wget https://github.com/argoproj/argo-cd/releases/download/v2.8.3/argocd-linux-amd64 -O argocd
      #     chmod +x argocd
      #     sudo mv argocd /usr/local/bin
      #     export ARGOCD_SERVER=${{ vars.ARGOCD_SERVER }}
      #     export ARGOCD_AUTH_TOKEN=${{ secrets.ARGOCD_AUTH_TOKEN }}
      #     argocd app create $PROJECTNAME-$GITHUB_REF_NAME --repo https://github.com/$GITHUB_REPOSITORY.git --revision $GITHUB_REF_NAME --path ./deploy/ --values values-$GITHUB_REF_NAME.yaml --dest-namespace $PROJECTNAME-$GITHUB_REF_NAME  --dest-server https://kubernetes.default.svc --upsert
      #     argocd app sync $PROJECTNAME-$GITHUB_REF_NAME
      #     argocd app wait $PROJECTNAME-$GITHUB_REF_NAME
      #     argocd app actions run $PROJECTNAME-$GITHUB_REF_NAME --namespace $PROJECTNAME-$GITHUB_REF_NAME restart --kind Deployment 